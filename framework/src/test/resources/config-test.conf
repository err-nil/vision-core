net {
  //  type = mainnet
  type = testnet
}


storage {
  # Directory for storing persistent data

  db.version = 2,
  db.engine = "LEVELDB"
  db.directory = "database",
  index.directory = "index",

  # You can custom these 14 databases' configs:

  # account, account-index, asset-issue, block, block-index,
  # block_KDB, peers, properties, recent-block, trans,
  # utxo, votes, witness, witness_schedule.

  # Otherwise, db configs will remain defualt and data will be stored in
  # the path of "output-directory" or which is set by "-d" ("--output-directory").

  # Attention: name is a required field that must be set !!!
  properties = [
    //    {
    //      name = "account",
    //      path = "storage_directory_test",
    //      createIfMissing = true,
    //      paranoidChecks = true,
    //      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
    //    {
    //      name = "account-index",
    //      path = "storage_directory_test",
    //      createIfMissing = true,
    //      paranoidChecks = true,
    //      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
    //    { # only for unit test
    //      name = "test_name",
    //      path = "test_path",
    //      createIfMissing = false,
    //      paranoidChecks = false,
    //      verifyChecksums = false,
    //      compressionType = 1,
    //      blockSize = 2,
    //      writeBufferSize = 3,
    //      cacheSize = 4,
    //      maxOpenFiles = 5
    //    },
  ]

  needToUpdateAsset = false

}

node.discovery = {
  enable = true
  persist = true
  bind.ip = "127.0.0.1"
  #external.ip = ""
}

node {

  trustNode = "127.0.0.1:50051"

  listen.port = 18888

  connection.timeout = 2

  active = [
    # Sample entries:
    # { url = "enode://<hex nodeID>@hostname.com:30303" }
    # {
    #    ip = hostname.com
    #    port = 30303
    #    nodeId = e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c
    # }
  ]

  maxActiveNodes = 30

  p2p {
    version = 43 # 43: testnet; 101: debug
  }

  http {
      fullNodeEnable = true
      fullNodePort = 8090
      solidityEnable = true
      solidityPort = 8091
  }

  rpc {
    port = 50051

    PBFTPort = 50072

    # Number of gRPC thread, default availableProcessors / 2
    # thread = 16

    # The maximum number of concurrent calls permitted for each incoming connection
    # maxConcurrentCallsPerConnection =

    # The HTTP/2 flow control window, default 1MB
    # flowControlWindow =

    # Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000

    # Connection lasting longer than which will be gracefully terminated
    # maxConnectionAgeInMillis =

    # The maximum message size allowed to be received on the server, default 4MB
    # maxMessageSize =

    # The maximum size of header list allowed to be received, default 8192
    # maxHeaderListSize =
  }

}

sync {
  node.count = 30
}

seed.node = {
  # List of the seed nodes
  # Seed nodes are stable full nodes
  # example:
  # ip.list = [
  #   "ip:port",
  #   "ip:port"
  # ]
  ip.list = [
#    "ip:18888",
  ]
}

genesis.block = {
  # Reserve balance
  assets = [
    # the account of foundation.
    {
      accountName = "Avalon"
      accountType = "AssetIssue"
      address = ""
      balance = "25000000000000000"
    },

    # the account of payment
    {
      accountName = "Galaxy"
      accountType = "AssetIssue"
      address = ""
      balance = "10000000000000000"
    },

    # the account of coin burn
    {
      accountName = "Singularity"
      accountType = "AssetIssue"
      address = ""
      balance = "-9223372036854775808"
    }
  ]

  witnesses = [
    {
      address:
      url = "",
      voteCount = 106
    },
  ]

  timestamp = "0" #2017-8-26 12:00:00

  parentHash = "0x0000000000000000000000000000000000000000000000000000000000000000"
}

// Optional.The default is empty.
// It is used when the witness account has set the witnessPermission.
// When it is not empty, the localWitnessAccountAddress represents the address of the witness account,
// and the localwitness is configured with the private key of the witnessPermissionAddress in the witness account.
// When it is empty,the localwitness is configured with the private key of the witness account.

//localWitnessAccountAddress =

localwitness = [

]

block = {
  needSyncCheck = true # first node : false, other : true
}

vm = {
  supportConstant = true
  minTimeRatio = 0.0
  maxTimeRatio = 5.0

  # In rare cases, transactions that will be within the specified maximum execution time (default 10(ms)) are re-executed and packaged
  # longRunningTime = 10
}
committee = {
  allowCreationOfContracts = 1  //mainnet:0 (reset by committee),test:1
}